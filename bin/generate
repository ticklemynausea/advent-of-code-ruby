#!/usr/bin/env ruby

require "fileutils"

PROBLEM_TEMPLATE = <<~PROBLEM_TEMPLATE.freeze
  class AdventOfCode::Year2022::Day{XXX}
    def problem1
    end

    def problem2
    end
  end
PROBLEM_TEMPLATE

SPEC_TEMPLATE = <<~SPEC_TEMPLATE.freeze
  require "spec_helper"

  RSpec.describe AdventOfCode::Year2022::Day{XXX} do
    subject { described_class.new }

    describe "example" do
      let(:input) do
        <<~INPUT
        INPUT
      end

      it "does something with the example input" do
        expect(nil).to eq(nil)
      end
    end

    describe "problem 1" do
      it "is correct" do
        expect(subject.problem1).to eq(nil)
      end
    end

    describe "problem 2" do
      it "is correct" do
        expect(subject.problem2).to eq(nil)
      end
    end
  end
SPEC_TEMPLATE

def create_file(filename, template, _year, day)
  if File.exist?(filename)
    warn "file exists: #{filename}"
    return
  end

  File.write(filename, template.gsub("{XXX}", day))
end

def ensure_dir(year, _day)
  [
    "lib/advent_of_code/year_#{year}/",
    "lib/advent_of_code/year_#{year}/inputs/",
    "spec/advent_of_code/year_#{year}/"
  ].each do |dir|
    if File.directory?(dir)
      warn "dir exists: #{dir}"
      next
    end

    FileUtils.mkdir_p(dir)
  end
end

def generate_problem(year, day)
  filename = "lib/advent_of_code/year_#{year}/day#{day}.rb"
  create_file(filename, PROBLEM_TEMPLATE, year, day)
end

def generate_spec(year, day)
  filename = "spec/advent_of_code/year_#{year}/day#{day}_spec.rb"
  create_file(filename, SPEC_TEMPLATE, year, day)
end

def generate_input(year, day)
  filename = "lib/advent_of_code/year_#{year}/inputs/day#{day}.txt"
  create_file(filename, "", year, day)
end

command, year, day =
  case ARGV.count
  when 3
    [ARGV.fetch(0), ARGV.fetch(1), ARGV.fetch(2)]
  when 2
    [nil, ARGV.fetch(0), ARGV.fetch(1)]
  when 1
    [nil, Time.now.year.to_s, ARGV.fetch(0)]
  else
    raise ArgumentError
  end

ensure_dir(year, day)

case command
when "problem"
  generate_problem(year, day)
  generate_input(year, day)
when "spec"
  generate_spec(year, day)
else
  generate_problem(year, day)
  generate_spec(year, day)
  generate_input(year, day)
end
