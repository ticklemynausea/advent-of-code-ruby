#!/usr/bin/env ruby

require "fileutils"

MODULE_TEMPLATE = <<~MODULE_TEMPLATE.freeze
  module AdventOfCode::Year{YEAR}
  end
MODULE_TEMPLATE

PROBLEM_TEMPLATE = <<~PROBLEM_TEMPLATE.freeze
  class AdventOfCode::Year{YEAR}::Day{DAY}
    def problem1
    end

    def problem2
    end
  end
PROBLEM_TEMPLATE

SPEC_TEMPLATE = <<~SPEC_TEMPLATE.freeze
  require "spec_helper"

  RSpec.describe AdventOfCode::Year{YEAR}::Day{DAY} do
    subject { described_class.new }

    describe "example" do
      let(:input) do
        <<~INPUT
        INPUT
      end

      it_behaves_like "daily problem" do
        let(:problem1_solution) { nil }
        let(:problem2_solution) { nil }
      end
    end

    it_behaves_like "daily problem" do
      let(:problem1_solution) { nil }
      let(:problem2_solution) { nil }
    end
  end
SPEC_TEMPLATE

def create_file(filename, template, year, day = "")
  if File.exist?(filename)
    warn "file exists: #{filename}"
    return
  end

  File.write(filename, template.gsub("{YEAR}", year).gsub("{DAY}", day))
end

def ensure_dir(year)
  [
    "lib/advent_of_code/year_#{year}/",
    "lib/advent_of_code/year_#{year}/inputs/",
    "spec/advent_of_code/year_#{year}/"
  ].each do |dir|
    if File.directory?(dir)
      warn "dir exists: #{dir}"
      next
    end

    FileUtils.mkdir_p(dir)
  end
end

def generate_module(year)
  filename = "lib/advent_of_code/year_#{year}.rb"
  create_file(filename, MODULE_TEMPLATE, year)
end

def generate_problem(year, day)
  filename = "lib/advent_of_code/year_#{year}/day#{day}.rb"
  create_file(filename, PROBLEM_TEMPLATE, year, day)
end

def generate_spec(year, day)
  filename = "spec/advent_of_code/year_#{year}/day#{day}_spec.rb"
  create_file(filename, SPEC_TEMPLATE, year, day)
end

def generate_input(year, day)
  filename = "lib/advent_of_code/year_#{year}/inputs/day#{day}.txt"
  create_file(filename, "", year, day)
end

command, year, day =
  case ARGV.count
  when 3
    [ARGV.fetch(0), ARGV.fetch(1), ARGV.fetch(2)]
  when 2
    [nil, ARGV.fetch(0), ARGV.fetch(1)]
  when 1
    [nil, Time.now.year.to_s, ARGV.fetch(0)]
  else
    raise ArgumentError
  end

ensure_dir(year)

case command
when "problem"
  generate_module(year, day)
  generate_problem(year, day)
  generate_input(year, day)
when "spec"
  generate_spec(year, day)
else
  generate_module(year)
  generate_problem(year, day)
  generate_spec(year, day)
  generate_input(year, day)
end
